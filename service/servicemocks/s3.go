// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package servicemocks

import (
	"sync"
	"undercast-bot/service"
)

// Ensure, that MockS3Store does implement service.S3Store.
// If this is not the case, regenerate this file with moq.
var _ service.S3Store = &MockS3Store{}

// MockS3Store is a mock implementation of service.S3Store.
//
//	func TestSomethingThatUsesS3Store(t *testing.T) {
//
//		// make and configure a mocked service.S3Store
//		mockedS3Store := &MockS3Store{
//			PreSignedURLFunc: func(key string) (string, error) {
//				panic("mock out the PreSignedURL method")
//			},
//		}
//
//		// use mockedS3Store in code that requires service.S3Store
//		// and then make assertions.
//
//	}
type MockS3Store struct {
	// PreSignedURLFunc mocks the PreSignedURL method.
	PreSignedURLFunc func(key string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// PreSignedURL holds details about calls to the PreSignedURL method.
		PreSignedURL []struct {
			// Key is the key argument value.
			Key string
		}
	}
	lockPreSignedURL sync.RWMutex
}

// PreSignedURL calls PreSignedURLFunc.
func (mock *MockS3Store) PreSignedURL(key string) (string, error) {
	if mock.PreSignedURLFunc == nil {
		panic("MockS3Store.PreSignedURLFunc: method is nil but S3Store.PreSignedURL was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockPreSignedURL.Lock()
	mock.calls.PreSignedURL = append(mock.calls.PreSignedURL, callInfo)
	mock.lockPreSignedURL.Unlock()
	return mock.PreSignedURLFunc(key)
}

// PreSignedURLCalls gets all the calls that were made to PreSignedURL.
// Check the length with:
//
//	len(mockedS3Store.PreSignedURLCalls())
func (mock *MockS3Store) PreSignedURLCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockPreSignedURL.RLock()
	calls = mock.calls.PreSignedURL
	mock.lockPreSignedURL.RUnlock()
	return calls
}
